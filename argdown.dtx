% \iffalse meta-comment
% !TeX program = xelatex
% !TeX encoding = utf-8
%<*internal>
\begingroup
%</internal>
%<*install>
\input{l3docstrip.tex}
\keepsilent
\askforoverwritefalse
\preamble
------------------------------------------------------------------------------

Argdown parser for LaTeX.

Copyright (C) 2022 by Felix Kopecky

This work consists of the file  argdown.dtx
          and the derived file  argdown.pdf.

It may be distributed and/or modified under the conditions of the
LaTeX Project Public License (LPPL), either version 1.3c of this
license or (at your option) any later version. The latest version
of this license is at <http://www.latex-project.org/lppl.txt>.

This work is ``maintained'' (per LPPL maintenance status) by
Felix Kopecky <f.kopecky@kit.edu>.

The development version can be found at

https://github.com/kopeckyf/argdown-l3

for those who are interested. Pull requests are welcome.

Please report any bugs or feature requests to

https://github.com/kopeckyf/argdown-l3/issues

------------------------------------------------------------------------------
\endpreamble
\declarepreamble\minimalpreamble
\endpreamble
\postamble
\endpostamble
\usedir{tex/latex/argdown}
%\generate{\file{\jobname.sty}{\from{\jobname.dtx}{package}}}
%</install>
%<install>\endbatchfile
%<*internal>
\usepreamble\minimalpreamble
\usepostamble\defaultpostamble
\usedir{source/latex/argdown}
%\generate{\file{\jobname.ins}{\from{\jobname.dtx}{install}}}
\endgroup
%</internal>
%<*driver>
\documentclass{l3doc}
\usepackage{argdown}
\usepackage[british]{babel}
\usepackage{enumitem}
\setlist[description]{font=\normalfont}
\usepackage{tcolorbox}
\begin{document}
\DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% \title{An \pkg{argdown} parser for \LaTeX}
% \author{Felix Kopecky\thanks{Please submit bug reports and feature requests to
% 		\protect\url{https://github.com/kopeckyf/argdown-l3/issues}.
% 	}}
% \date{development version from \today}
% \maketitle
% \frenchspacing
% \begin{documentation}
% \noindent Argdown (\url{https://argdown.org/}) provides a syntax to visualise reconstructions of arguments. This package contains a parser for the Argdown syntax in \LaTeX. Argdown code can be input directly into \LaTeX\ documents using it.
% \begin{tcolorbox}
%    This package can parse atomic Argdown objects, such as single statements and premise-conclusion structures. The parser does not support visualisation of relations between these objects, though.
%\end{tcolorbox}
% \section{User guide}
% \subsection{Initialisation}
% The package is loaded in a \LaTeX\ document with \cs{usepackage\{argdown\}}. The package is loaded without any options, but settings can be customised via \cs{argdownsettings}, explained below. \pkg{argdown} depends on only core packages \pkg{xparse} and \pkg{amsthm}.
% \subsection{Argdown input}
% The command \cmd{\argdown} facilitates parsing of Argdown syntax, as defined at \url{https://argdown.org/syntax/}.
% \begin{function}{\argdown}
%   \begin{syntax}
%     \cs{argdown} \oarg{options} \marg{input in Argdown format}
%   \end{syntax}
% The \oarg{options} are local settings applied to the current \cs{argdown} call only. Their usage is exactly the same as in \cs{argdownsettings}, explained below.
%
% \begin{minipage}[c]{.5\linewidth}
% \begin{verbatim}
% \argdown{
% (1) Socrates is a human.
% (2) All humans are mortal.
% --
% Modus ponens
% --
% (3) Socrates is mortal.
% }
% \end{verbatim}
% \end{minipage}%
% \begin{minipage}[c]{.5\linewidth}
% \include{argdownexample.tex}
% \end{minipage}%
% \end{function}
%
% \begin{function}{\argdownsettings}
%    \begin{syntax}
%      \cs{argdownsettings} \marg{options}
%    \end{syntax}
% Set \marg{options} for Argdown globally, that is, for every \cs{argdown} instance following the setting in the current scope. Scopes can be global or local. They are local if they are called in a \LaTeX\ group or environment, or mid-document.
%
% The options are as follows:
% \begin{description}[style=nextline]
% \item[|leftmargin =| \meta{dimension}\hfill (initially \cs{leftmargin})] Space between the left margin of the page and the \cs{argdown} block.
% \item[|rightmargin =| \meta{dimension}\hfill (initially \cs{rightmargin})] Space between the right margin of the page and the \cs{argdown} block.
% \item[|labelwidth =| \meta{dimension}\hfill (initially \cs{labelwidth})] Space reserved for the label of statements (premises and conclusions).
% \item[|labelsep =| \meta{dimension}\hfill (initially \cs{labelsep})] Space between label of statements and its content.
% \item[|topsep =| \meta{dimension}\hfill (initially |0.5|\cs{topsep})] Vertical space before and after an object (such as an argument or a statement).
% \item[|roisep =| \meta{dimension}\hfill (initially |0.5|\cs{topsep})] Vertical space before and after the inference rule.
% \item[|itemsep =| \meta{dimension}\hfill (initially \cs{itemsep})] Vertical space between subsequent premises and conclusions of an argument reconstruction.
% \item[|descriptions =| \meta{boolean}\hfill (initially |false|)] Whether or not to print descriptors for statements (such as “premise” and “conclusion”). See below for the locale options.
% \item[|title~font =| \meta{font settings}\hfill (initially \cs{itshape})] Font of the titles of arguments and statements.
% \item[|locale/argument =| \meta{string}\hfill (initially |Argument|)] The descriptor of argument objects.
% \item[|locale/premise =| \meta{string}\hfill (initially |Premise|)] The descriptor of premise objects.
% \item[|locale/conclusion =| \meta{string}\hfill (initially |Conclusion|)] The descriptor of conclusion objects.
% \item[|locale/intermediateconclusion =| \meta{string}\hfill (initially |Intermediate Conclusion|)] The descriptor of intermediate conclusion objects.
% \end{description}
%
%
% \end{function}
% \end{documentation}
% \newpage
%
% \begin{implementation}
% \section{Implementation}
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%    \begin{macrocode}
%<@@=argdown>
%    \end{macrocode}
%    \begin{macrocode}
\RequirePackage{xparse, amsthm}
\ProvidesExplPackage {argdown} {2022-01-06} {0.0} {Argdown parser for LaTeX}
%    \end{macrocode}

%    \begin{macro}{\argdown}
% The command to call the parser in the document.
%    \begin{macrocode}
\NewDocumentCommand{\argdown}{O{} +v}
  {%
    \c_group_begin_token
    \keys_set:nn { argdown } { #1 }
    \__argdown_begin_outer_list:
    \argdown_parse:n { #2 }
    \__argdown_end_list:
    \c_group_end_token
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}{\argdownsettings}
% Customise settings globally.
%    \begin{macrocode}
\NewDocumentCommand{\argdownsettings}{m}{ \keys_set:nn { argdown } { #1 } }
%    \end{macrocode}
%    \end{macro}

% \begin{variable}[int]{
%    \seq_set_split:Nnn {Nxn},
%    \l__argdown_lines_seq,
%    \l__argdown_current_position_int,
%    \l__argdown_statement_id_tl,
%    \l__argdown_scanned_tl,
%    \l__argdown_statement_name_tl,
%    \l__argdown_in_list_bool,
%    \l__argdown_in_theorem_bool,
%    \l__argdown_after_inference_bool,
%    \l__argdown_print_descriptions_bool,
%    \l__argdown_localisation_prop
%  }
%  Variants and internal variables.
%    \begin{macrocode}
\cs_generate_variant:Nn \seq_set_split:Nnn {Nxn}
\seq_new:N \l__argdown_lines_seq
\int_new:N \l__argdown_current_position_int
\tl_new:N \l__argdown_statement_id_tl
\tl_new:N \l__argdown_scanned_tl
\tl_new:N \l__argdown_statement_name_tl
\bool_new:N \l__argdown_in_list_bool
\bool_new:N \l__argdown_in_theorem_bool
\bool_new:N \l__argdown_after_inference_bool
\bool_new:N \l__argdown_print_descriptions_bool
\prop_new:N \l__argdown_localisation_prop
%    \end{macrocode}
% \end{variable}

%    \begin{macrocode}
\keys_define:nn { argdown }
  {
    leftmargin .dim_set:N  = \l__argdown_list_leftmargin_dim,
    leftmargin .initial:n  = {\leftmargin},
    rightmargin .dim_set:N = \l__argdown_list_rightmargin_dim,
    rightmargin .initial:n = {\rightmargin},
    labelwidth .dim_set:N  = \l__argdown_list_labelwidth_dim,
    labelwidth .initial:n  = {\labelwidth},
    labelsep .dim_set:N    = \l__argdown_list_labelsep_dim,
    labelsep .initial:n    = {\labelsep},
    topsep .dim_set:N      = \l__argdown_list_topsep_dim,
    topsep .initial:n      = {.5\topsep},
    roisep .dim_set:N      = \l__argdown_list_roisep_dim,
    roisep .initial:n      = {.5\topsep},
    itemsep .dim_set:N     = \l__argdown_list_itemsep_dim,
    itemsep .initial:n     = {\itemsep},
    descriptions .bool_set:N = \l__argdown_print_descriptions_bool,
    descriptions .initial:n = {false},
    title~font .code:n = {\cs_set:Nn \__argdown_title_font: {#1}},
    title~font .initial:n = {\itshape},
    locale / argument .prop_put:N = \l__argdown_localisation_prop,
    locale / argument .initial:n = {Argument},
    locale / premise .prop_put:N = \l__argdown_localisation_prop,
    locale / premise .initial:n = {Premise},
    locale / conclusion .prop_put:N = \l__argdown_localisation_prop,
    locale / conclusion .initial:n = {Conclusion},
    locale / intermediateconclusion .prop_put:N = \l__argdown_localisation_prop,
    locale / intermediateconclusion .initial:n = {Intermediate~Conclusion},
  }
%    \end{macrocode}

%    \begin{macro}[int]{argdown@rgumentstyle, argdown@rgument, argdownst@tement}
% The theorem style to store arguments.
%    \begin{macrocode}
\newtheoremstyle{argdown@rgumentstyle}%
                {0pt}%
                {0pt}%
                {\normalfont}%
                {}%
                {\__argdown_title_font:}%
                {:}%
                {.5em}%
                {}%

\theoremstyle{argdown@rgumentstyle}
\newtheorem{argdown@rgument}
  {%
    \prop_item:Nn \l__argdown_localisation_prop {argument}%
  }

\newtheorem*{argdownst@tement}
  {%
    \tl_use:N \l__argdown_statement_name_tl
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}{\argdown_parse:n}
% Execute the parser.
%    \begin{macrocode}
\cs_new:Npn \argdown_parse:n #1
  {
    \seq_set_split:Nxn \l__argdown_lines_seq {\iow_char:N \^^M} {#1}
    \seq_remove_all:Nn \l__argdown_lines_seq {}
    \seq_clear_new:N \l__argdown_position_of_boundaries_seq
    \int_zero:N \l__argdown_current_position_int
    \seq_map_inline:Nn \l__argdown_lines_seq
      {
        \tl_if_head_eq_meaning:nNTF
        { ##1 }
        <
          {
            \seq_put_right:NV
            \l__argdown_position_of_boundaries_seq
            \l__argdown_current_position_int
          }
          {
            \tl_if_head_eq_meaning:nNT
            { ##1 }
            [
              {
                \seq_put_right:NV
                \l__argdown_position_of_boundaries_seq
                \l__argdown_current_position_int
              }
          }
        \int_incr:N \l__argdown_current_position_int
      }
    \seq_put_right:Nx \l__argdown_position_of_boundaries_seq
      { \int_eval:n {\seq_count:N \l__argdown_lines_seq }  }
    \int_zero:N \l__argdown_current_position_int
    \seq_map_inline:Nn \l__argdown_lines_seq
      {
        \int_gincr:N \l__argdown_current_position_int
        \tl_gset_rescan:Nnn \l__argdown_scanned_tl {} { ##1 }
        \exp_args:Nx \token_case_meaning:NnF {\tl_head:N \l__argdown_scanned_tl }
          {
            < {  \__argdown_parse_titles:N \l__argdown_scanned_tl  }
            ( {  \__argdown_parse_statements:N \l__argdown_scanned_tl  }
            - {  \__argdown_parse_delimiters:N \l__argdown_scanned_tl  }
            [ {  \__argdown_parse_singletons:N \l__argdown_scanned_tl  }
          }
          {
            \bool_if:NTF \l__argdown_after_inference_bool
            {\__argdown_parse_roi:N \l__argdown_scanned_tl}
            {\tl_use:N \l__argdown_scanned_tl}
          }
      }
    \bool_if:NT \l__argdown_in_list_bool
      {
        \__argdown_end_list:
        \bool_set_false:N \l__argdown_in_list_bool
      }
    \bool_if:NT \l__argdown_in_theorem_bool
      {
        \__argdown_end_theorem:
        \bool_set_false:N \l__argdown_in_theorem_bool
      }
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[int]{\__argdown_parse_titles:N}
% Parses titles
%    \begin{macrocode}
\cs_new:Npn \__argdown_parse_titles:N #1
  {
    \bool_if:NT \l__argdown_in_list_bool
      {
        \__argdown_end_list:
        \bool_set_false:N \l__argdown_in_list_bool
      }
    \bool_if:NT \l__argdown_in_theorem_bool
      {
        \__argdown_end_theorem:
        \bool_set_false:N \l__argdown_in_theorem_bool
      }
    \item[] \__argdown_begin_theorem:
    \bool_set_true:N \l__argdown_in_theorem_bool
    \tl_remove_once:Nn #1 { < }
    \tl_remove_once:Nn #1 { > }
    \tl_use:N #1
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[int]{\__argdown_parse_statements:N}
% Parse statements.
%    \begin{macrocode}
\cs_new:Npn \__argdown_parse_statements:N #1
  {
    \tl_clear:N \l__argdown_statement_id_tl
    \tl_map_inline:Nn #1
      {
        \str_case:nnF { ##1 }
          {
            { ( }  { }
            { ) }  { \tl_map_break: }
          }
          { \tl_put_right:Nn \l__argdown_statement_id_tl ##1 }
      }
    \bool_if:NF \l__argdown_in_list_bool
      {
        \item[]
        \__argdown_begin_list:
        \bool_set_true:N \l__argdown_in_list_bool
      }
    \item[(\tl_use:N \l__argdown_statement_id_tl)]
    \bool_if:NT \l__argdown_print_descriptions_bool
      {
        \bool_if:NTF \l__argdown_after_inference_bool
          {
            \seq_if_in:NxTF
            \l__argdown_position_of_boundaries_seq
              {
                \int_eval:n { \l__argdown_current_position_int }
              }
              {
                \prop_item:Nn \l__argdown_localisation_prop
                {conclusion}:\c_space_token
              }
              {
                \prop_item:Nn \l__argdown_localisation_prop
                {intermediateconclusion}:\c_space_token
              }
            }
            {
              \prop_item:Nn \l__argdown_localisation_prop
              {premise}:\c_space_token
            }
      }
    \tl_range:Nnn #1 {\tl_count:N \l__argdown_statement_id_tl + 3} { -1 }
    \bool_set_false:N \l__argdown_after_inference_bool
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[int]{\__argdown_parse_delimiters:N}
% Parse inference rules.
%    \begin{macrocode}
\cs_new:Npn \__argdown_parse_delimiters:N #1
  {
    \bool_if:NTF \l__argdown_in_list_bool
      {
        \__argdown_end_list:
        \__argdown_inference_rule:
        \bool_set_false:N \l__argdown_in_list_bool
      }
      {
        \__argdown_inference_rule:
        \__argdown_begin_list:
        \bool_set_true:N \l__argdown_in_list_bool
      }
    \bool_set_true:N \l__argdown_after_inference_bool
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[int]{\__argdown_parse_roi:N}
% Parse rules of inference.
%    \begin{macrocode}
\cs_new:Npn \__argdown_parse_roi:N #1
  {
    \bool_if:NTF \l__argdown_in_list_bool
      {
        \item[] \tl_use:N #1
      }
      {
        \c_group_begin_token
        \dim_set_eq:NN
        \l__argdown_list_topsep_dim
        \l__argdown_list_roisep_dim
        \__argdown_begin_list:
        \item[] \tl_use:N #1
        \__argdown_end_list:
        \c_group_end_token
      }
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[int]{\__argdown_parse_singletons:N}
% Parse single statements.
%    \begin{macrocode}
\cs_new:Npn \__argdown_parse_singletons:N #1
  {
    \tl_gclear:N \l__argdown_statement_name_tl
    \tl_greplace_all:Nnn #1 { ~ } { \c_space_token }
    \tl_map_inline:Nn #1
      {
        \str_case:nnF { ##1 }
          {
            { [ }  { }
            { ] }  { \tl_map_break: }
          }
          { \tl_gput_right:Nn \l__argdown_statement_name_tl ##1 }
      }
    \bool_if:NT \l__argdown_in_list_bool
      { \__argdown_end_list: }
    \bool_if:NT \l__argdown_in_theorem_bool
      { \__argdown_end_theorem: }
    \__argdown_begin_singleton:
    \tl_range:Nnn #1 {\tl_count:N \l__argdown_statement_name_tl + 3} { -1 }
    \__argdown_end_singleton:
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[int]{\__argdown_begin_outer_list:}
% The outer list for every \cmd{argdown} environment.
%    \begin{macrocode}
\cs_new:Nn \__argdown_begin_outer_list:
  {%
    \begin{list}
    {}
    {
      \leftmargin=\dim_use:N \l__argdown_list_leftmargin_dim
      \rightmargin=\dim_use:N \l__argdown_list_rightmargin_dim
      \labelwidth=0pt
      \labelsep=0pt
      \itemindent=0pt
      \topsep=\dim_use:N \l__argdown_list_topsep_dim
      \itemsep=0pt
      \partopsep=0pt
    }
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[int]{\__argdown_begin_list:}
% Inner list for premise-conclusion structures.
%    \begin{macrocode}
\cs_new:Nn \__argdown_begin_list:
  {
    \begin{list}
    {}
    {
      \leftmargin=\dim_use:N \l__argdown_list_labelwidth_dim
      \rightmargin=0pt
      \labelwidth=\dim_use:N \l__argdown_list_labelwidth_dim
      \labelsep=\dim_use:N \l__argdown_list_labelsep_dim
      \topsep=\dim_use:N \l__argdown_list_topsep_dim
      \itemsep=\dim_use:N \l__argdown_list_itemsep_dim
      \partopsep=0pt
    }
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[int]{\__argdown_end_list:, }
%    \begin{macrocode}
\cs_new:Nn \__argdown_end_list: { \end{list} }
\cs_new:Nn \__argdown_begin_theorem: { \begin{argdown@rgument} }
\cs_new:Nn \__argdown_end_theorem: { \end{argdown@rgument} }
\cs_new:Nn \__argdown_begin_singleton: { \item [] \begin{argdownst@tement} }
\cs_new:Nn \__argdown_end_singleton:  { \end{argdownst@tement} }
\cs_new:Npn \__argdown_inference_rule: { \vskip-.5\baselineskip\noindent\hrulefill\par }
%    \end{macrocode}
%    \end{macro}

%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
% \PrintIndex
